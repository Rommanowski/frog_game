//JAKUB ROMANOWSKI

#include <stdio.h>
#include <ncurses.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

#define CONFIG_FNAME "config.txt"
#define ENTER 10

#define GRASS_COL 1
#define ROAD_COL 2
#define META_COL 3
#define BLACK_COL 4
#define FRIENDLY_CAR_COL 5

#define PLAYER_SYMBOL '@'
#define ATTACHMENT_KEY 'c'
#define Player_SPEED 1

#define MIN_CAR_LEN 3
#define MAX_CAR_LEN 5
#define CARS_PER_LANE 6
#define CAR_MIN_SPEED 1
#define CAR_MAX_SPEED 4
#define CAR_STOPS_PROB 2
#define CAR_FRIENDLY_PROB 2
#define CAR_DISAPPEAR_PROB 4

#define PLAYWIN_Y 5
#define PLAYWIN_X 10
#define MAP_HEIGHT 25
#define MAP_WIDTH 175

#define FRAME_TIME 100       //MILISECONDS

#define RA(min, max) ( (min) + rand() % ((max) - (min) + 1) )       //used from ball.c


// READING / WRITING TO FILES

void readconfig(int *numlevels)
{
    FILE *f = fopen(CONFIG_FNAME, "r");
    if( f == NULL)
    {
        printw("ERROR: config file not found! Check the name of CONFIG_FNAME");
        endwin();
        return;
    }
    int result = fscanf(f, "%*s%d", numlevels);     //skip the first string in a file input, since it's a variable name
    // if(result != 1)
    // {
    //     printw("ERROR: Failed to read config file.");
    //     endwin();
    //     fclose(f);
    //     return;
    // }
    fclose(f);
}

// GENERATING MAP (key)
char *GenerateMap(int map_length, int grassprob, int bouncyprob)            // G -> grass
{                                                                           // H -> road(cars dissappear)
    srand(time(NULL));                                                      // B -> cars are bouncy
    char *map = (char *)malloc((map_length+1) * sizeof(char));
    for(int i=0; i<5; ++i)
    {
        map[i] = 'G';
    }
    for(int i=5; i<map_length; ++i)
    {
        int a=rand();
        int b=rand();
        if(a%grassprob == 0)
            map[i]='G';
        else
        {
            if(b%bouncyprob == 0)
            {
                map[i] = 'B';
            }
            else
                map[i] = 'H';
        }
    }
    map[map_length] = '\0';
    return map;
}

// OBJECTS OBJECTS OBJECTS
typedef struct{
    int xPos;
    int yPos;
    int yMax;
    int xMax;
    int lastFrameMoved;
    int isAttached;
    int attachedi;
    int attachedj;
    char symbol;

} Player;

typedef struct{
    float time;
    int frame_n;
} Timer;

typedef struct{
    int head;
    int lane;
    int length;
    int speed;
    int stops;
    int isFriendly;
    int lastFrameMoved;         // frame at which the car has moved for the last time (used for changing car speeds)
} Car;

// WINDOWS FUNCTIONS
int GenerateRoads(WINDOW *win, int border, int yMax, int xMax)
{
    int i, j;
    int lanes=0;
    if(border)
        box(win, 0, 0);
    for(i=border; i < yMax-border; ++i)
    {
        if(i == border)
            wattron(win, COLOR_PAIR(META_COL));             //top lane is the meta
        else if(i   %2==0 || i>yMax-3)
            wattron(win, COLOR_PAIR(GRASS_COL));            //even lanes are grass 
        else
            {
                wattron(win, COLOR_PAIR(ROAD_COL));         //uneven lanes are road
                lanes++;
            }               
        for(j=border; j < xMax-border; ++j)
        {
            mvwaddch(win, i, j, ' ');
        }
    }
    return lanes;
}
void RefreshWindow(WINDOW *win, int border, int yMax, int xMax)
{
    int i, j;
    if(border)
        box(win, 0, 0);
    for(i=border; i < yMax-border; ++i)
    {
        if(i == border)
            wattron(win, COLOR_PAIR(META_COL));             //top lane is the meta
        else if(i%2==0 || i>yMax-3)
            wattron(win, COLOR_PAIR(GRASS_COL));            //even lanes are grass 
        else
            wattron(win, COLOR_PAIR(ROAD_COL));             //uneven lanes are road
        for(j=border; j < xMax-border; ++j)
        {
            if(mvwinch(win, i, j) == ' ')
                mvwaddch(win, i, j, ' ');
        }
    }
}
void ClearWindow(WINDOW *win, int border, int yMax, int xMax)
{
    int i, j;
    if(border)
        box(win, 0, 0);
    wattron(win, COLOR_PAIR(BLACK_COL));
    for(i=border; i < yMax-border; ++i)
    {
        for(j=border; j < xMax-border; ++j)
        {
            mvwaddch(win, i, j, ' ');
        }
    }
}

void GameOver(WINDOW *win, Player *p, int border)
{
            mvprintw(0, 0, "Frog died!                              ");
            refresh();
            usleep(1000*1000*3);
            ClearWindow(win, 0, p->yMax, p->xMax);
            mvwprintw(win, 0, 0, "*****  *****   *   *   *****      *****   *   *   *****   *****   ");
            mvwprintw(win, 1, 0, "*      *   *   ** **   *          *   *   *   *   *       *   *   ");
            mvwprintw(win, 2, 0, "*  **  *****   * * *   *****      *   *    * *    *****   *****   ");
            mvwprintw(win, 3, 0, "*   *  *   *   *   *   *          *   *    * *    *       *  *    ");
            mvwprintw(win, 4, 0, "*****  *   *   *   *   *****      *****     *     *****   *   *   ");
            mvwprintw(win, 10, 0, "Press any key to countinue...                                    ");
            wrefresh(win);    
            //usleep(1000*1000*3);
            flushinp();
            getch();
            mvwprintw(win, 0, 0, "                                                                  ");
            mvwprintw(win, 1, 0, "                                                                  ");
            mvwprintw(win, 2, 0, "                                                                  ");
            mvwprintw(win, 3, 0, "                                                                  ");
            mvwprintw(win, 4, 0, "                                                                  ");
            mvwprintw(win, 10, 0, "                                                                 ");
            wrefresh(win);
}

WINDOW *StartLevel(int choice)
{
    WINDOW *win = newwin(MAP_HEIGHT, MAP_WIDTH, PLAYWIN_Y, PLAYWIN_X);        //PLACEHOLDER VALUES
    //box(win, 0, 0);

    init_pair(GRASS_COL, COLOR_WHITE, COLOR_GREEN);
    init_pair(ROAD_COL, COLOR_WHITE, COLOR_YELLOW);
    init_pair(META_COL, COLOR_WHITE, COLOR_RED);
    init_pair(BLACK_COL, COLOR_WHITE, COLOR_BLACK);
    init_pair(FRIENDLY_CAR_COL, COLOR_BLUE, COLOR_YELLOW);

    return win;
}


// MENU FUNCTIONS
int Choice(int numlevels)
{
    mvprintw(0, 0,"Choose the level:                 ");
    mvprintw(1, 0,"                                  ");
    refresh();
    WINDOW *menuwin = newwin(numlevels+2, 20, 5, 10);
    box(menuwin, 0, 0);

    int highlight =0;
    while(1)
    {
        for(int i=0; i < numlevels; ++i)
        {
            if(i==highlight)
                wattron(menuwin, A_REVERSE);
            mvwprintw(menuwin, 1+i, 2, "level %d", i);
            wattroff(menuwin, A_REVERSE);
        }
    int key = wgetch(menuwin);
    switch(key)
    {
        case 'w':
            if(highlight > 0)
                highlight--;
            break;
        case 's':
            if(highlight < numlevels-1)
                highlight++;
            break;
        case ENTER:                // if ENTER pressed
            delwin(menuwin);
            return highlight;
        default:
            break;
    }
    }
    return 0;
}

// LEVELS FUNCTIONS

// COLOR FUNCTIONS
void SetGoodColor(WINDOW *win, Player *p)
{
    if(p->yPos % 2 == 1 && p->yPos < p->yMax-3)
        wattron(win, COLOR_PAIR(ROAD_COL));
    else
        wattron(win, COLOR_PAIR(GRASS_COL));
}

// OBJECT FUNCTIONS
Player CreatePlayer(int yPos, int xPos, int yMax, int xMax, int lastFrame, char symbol)
{
    Player p;
    p.yPos = yPos;
    p.xPos = xPos;
    p.yMax = yMax;
    p.xMax = xMax;
    p.lastFrameMoved = lastFrame;
    p.isAttached = 0;
    p.symbol = symbol;
    return p;
}

Timer CreateTimer()
{
    Timer t;
    t.time = 0;
    t.frame_n = 0;
    return t;
}

Car CreateCar(int head, int lane, int length, int speed, int stops, int isFriendly, int lastFrame)
{
    Car car;
    car.head = head;
    car.lane = lane;
    car.length = length;
    car.speed = speed;
    car.stops = stops;
    car.isFriendly = isFriendly;
    car.lastFrameMoved = lastFrame;

    return car;
}
Car CreateRandomCar(int lane, int lastFrame)
{
    int randomSpeed = RA(CAR_MIN_SPEED, CAR_MAX_SPEED);
    int randomLength = RA(MIN_CAR_LEN, MAX_CAR_LEN);
    int randomNotStops = RA(0, CAR_STOPS_PROB)%CAR_STOPS_PROB;
    int randomIsNotFriendly = RA(0, CAR_FRIENDLY_PROB)%CAR_FRIENDLY_PROB;
    Car car;
    car.head = 0;
    car.lane = lane;
    car.length = randomLength;
    car.speed = randomSpeed;
    car.stops = !randomNotStops;
    car.isFriendly = !randomIsNotFriendly;
    car.lastFrameMoved = lastFrame;
    return car;
}

//this is the array of all cars
Car **CreateCars(int numroads)
{
    Car **cars = (Car **)malloc(numroads * sizeof(Car *));
    for(int i=0; i<numroads; ++i)
    {
        //int randomSpeed = RA(CAR_MIN_SPEED, CAR_MAX_SPEED);
        cars[i] = (Car *)malloc(CARS_PER_LANE * sizeof(Car));
        for(int j=0; j<CARS_PER_LANE; ++j)
        {
            int randomSpeed = RA(CAR_MIN_SPEED, CAR_MAX_SPEED);
            int randomLength = RA(MIN_CAR_LEN, MAX_CAR_LEN);
            int randomHead = RA(j*MAP_WIDTH/CARS_PER_LANE, (j+1)*MAP_WIDTH/CARS_PER_LANE - randomLength);
            int randomNotStops = RA(0, CAR_STOPS_PROB)%CAR_STOPS_PROB;
            cars[i][j] = CreateCar(randomHead, 1+(2*i), randomLength, randomSpeed, !randomNotStops, 1, 0);
        }
    }
    return cars;
}

void PlaceCar(WINDOW *win, Car *car, Player *p)
{
    wattron(win, COLOR_PAIR(ROAD_COL));
        for(int i=car->head; i>car->head-car->length+1; --i)
            if(i >= 0)
                mvwaddch(win, car->lane, i, '>');
}

//car movement
int MoveCar(WINDOW *win, Car *car, Player *p, Timer t)
{
    if(car->isFriendly)
        wattron(win, COLOR_PAIR(FRIENDLY_CAR_COL));
    else
        wattron(win, COLOR_PAIR(ROAD_COL));
    // this loop reassures that when one car is surpassing another, there will be no blank space between them on screen
    for(int i=car->head; i>car->head-car->length+1; --i)
            if(i >= 0)
                mvwaddch(win, car->lane, i, '>');
    if(((mvwinch(win, car->lane+1, car->head+2) & A_CHARTEXT) == PLAYER_SYMBOL) && car->stops)
    {
        car->lastFrameMoved = t.frame_n + (1000/FRAME_TIME);
        car->stops = 0;
        return 0;
    }
    if(t.frame_n - car->lastFrameMoved>= car->speed)
    {
        car->head++;
        //mvwaddch(win, car->lane, car->head-car->length, ' ');
        if((mvwinch(win, car->lane, car->head - car->length) & A_CHARTEXT)  != '@')
            mvwaddch(win, car->lane, car->head-car->length, ' ');
        if(car -> head <= p->xMax + car->length)
        {    
            mvwaddch(win, car->lane, car->head, '>');
        }
        else
        {
            if(RA(0, CAR_DISAPPEAR_PROB)%CAR_DISAPPEAR_PROB == 0)
            {
                *car = CreateRandomCar(car->lane, car->lastFrameMoved);
            }
            else
                car->head = -1;
        }
        car->lastFrameMoved = t.frame_n;
        //wattroff(win, COLOR_PAIR(ROAD_COL));
    }
    wrefresh(win);
    return 0;
}

int CheckAttachment(WINDOW *win, Player *p, Car **cars, int numroads, char key)
{
    if(p->isAttached)
        return 1;
    if(key == ATTACHMENT_KEY)
    {
        for(int i=0; i<numroads; ++i)
        {
            for(int j=0; j<CARS_PER_LANE; ++j)
            {
                if((cars[i][j].lane == p->yPos-1) && cars[i][j].head == p->xPos-1)
                {
                    p->isAttached=1;
                    p->attachedi = i;
                    p->attachedj = j;
                    return 1;
                }
            }
        }
    }
    return 0;
}

void FollowCar(WINDOW *win, Player *p, Car **cars)
{
    p->yPos = cars[p->attachedi][p->attachedj].lane;
    p->xPos = cars[p->attachedi][p->attachedj].head-1;
}

void DisplayTimerInfo(WINDOW *win, Timer *t, int yMax, int display)
{
    if(display)
    {
        mvprintw(yMax+PLAYWIN_Y+2, PLAYWIN_X, "current time:  %.2f   ", t->time);
        mvprintw(yMax+PLAYWIN_Y+3, PLAYWIN_X, "current frame: %d     ", t->frame_n);
    }
    else
    {
        mvprintw(yMax+PLAYWIN_Y+2, PLAYWIN_X, "                      ");
        mvprintw(yMax+PLAYWIN_Y+3, PLAYWIN_X, "                      ");
    }
    wrefresh(win);
    t->time += (float)FRAME_TIME/1000;
    t->frame_n++;
}
    
    //PLAYER MOVEMENT FUNCTIONS
    void MvPlayerUp(WINDOW *win, Player *p)
    {
    if(p->yPos > 0)
        {
            SetGoodColor(win, p);
            mvwaddch(win, p->yPos, p->xPos, ' ');
            p->yPos--;
        }
    }
    void MvPlayerDown(WINDOW *win, Player *p)
    {
        if(p->yPos < p->yMax-1)
        {
            SetGoodColor(win, p);
            mvwaddch(win, p->yPos, p->xPos, ' ');
            p->yPos++;
        }
    }
    void MvPlayerRight(WINDOW *win, Player *p)
    {
        if(p->xPos < p->xMax-1)
        {
            SetGoodColor(win, p);
            mvwaddch(win, p->yPos, p->xPos, ' ');
            p->xPos++;
        }
    }
    void MvPlayerLeft(WINDOW *win, Player *p)
    {
        if(p->xPos > 0)
        {
            SetGoodColor(win, p);
            mvwaddch(win, p->yPos, p->xPos, ' ');
            p->xPos--;
        }
    }
    int DisplayPlayer(WINDOW *win, Player *p, Timer t, char key)
    {
        if(t.frame_n - p->lastFrameMoved >= Player_SPEED)
        {
            switch(key)
            {
                case 'w':
                    MvPlayerUp(win, p);
                    p->lastFrameMoved = t.frame_n;
                    break;
                case 's':
                    MvPlayerDown(win, p);
                    p->lastFrameMoved = t.frame_n;
                    break;
                case 'a':
                    MvPlayerLeft(win, p);
                    p->lastFrameMoved = t.frame_n;
                    break;
                case 'd':
                    MvPlayerRight(win, p);
                    p->lastFrameMoved = t.frame_n;
                    break;
                default:
                    break;
            }
        }

        // these lines make colors of the map stay as they should be
        SetGoodColor(win, p);

        // Cars are updated before the player, so if there is a car symbol at player's position before he is displayed, that means
        // he ran into a car
        if(((mvwinch(win, p->yPos, p->xPos) & A_CHARTEXT) == '>') && !p->isAttached)
        {
            mvwaddch(win, p->yPos, p->xPos, p->symbol);
            wrefresh(win);
            GameOver(win, p, 0);
            return 0;
        }

        mvwaddch(win, p->yPos, p->xPos, p->symbol);
        //RefreshWindow(win, 0, p->yMax, p->xMax);
        flushinp();         //to 'unclog' the input (so it does not stack up)
        return 1;
    }



// MAIN LOOP

int MainLoop(WINDOW *win, Player *player, Timer timer, Car **cars, int numroads)
{
    char key;
    do
    {
        if(!CheckAttachment(win, player, cars, numroads, key))
        {
            // if DisplayPlayer returns 0, it means that the game is lost (so hide the timer and exit the loop)
            if (!DisplayPlayer(win, player, timer, key))
                {
                    DisplayTimerInfo(stdscr, &timer, player->yMax, 0);   
                    break;
                }
        }
        else
        {
            FollowCar(win, player, cars);
        }

        DisplayTimerInfo(stdscr, &timer, player->yMax, 1);       
        for(int i=0; i<numroads; ++i)
        {
            for(int j=0; j<CARS_PER_LANE; ++j)
            {
                MoveCar(win, &cars[i][j], player, timer);
            }
        }
        mvwaddch(win, player->yPos, player->xPos, PLAYER_SYMBOL);
        usleep(1000 * FRAME_TIME);
    }while(key = wgetch(win));
    
}

int main()
{
    while(1)
    {
    //ncurses start
    initscr();
    noecho();
    cbreak();
    curs_set(0);
    start_color();
    //use_default_colors();
    
    // variables
    int numlevels = 0;   //number of levels

    // load from config file
    readconfig(&numlevels);
    //printw("number of levels: %d\n", numlevels);

    // choosing the level
    int choice = Choice(numlevels);         // choice -> a variable   Choice -> a function
    int yMax, xMax;                          // level window dimensions

    WINDOW *levelwin = StartLevel(choice);
    getmaxyx(levelwin, yMax, xMax);
    nodelay(levelwin, true);
    int numRoads = GenerateRoads(levelwin, 0, yMax, xMax);      //number of road lanes
    refresh();
    wrefresh(levelwin);

    Player player;
    player = CreatePlayer(yMax-2, xMax/2, yMax, xMax, 0, PLAYER_SYMBOL);
    Timer timer;
    timer = CreateTimer();

    //testing cars
    // Car car = CreateCar(5, 3, 20, 4, 1, 0, 0);
    // PlaceCar(levelwin, &car, &player);

    Car **cars = CreateCars(numRoads);
    for(int i=0; i<numRoads; ++i)
    {
        for(int j=0; j<CARS_PER_LANE; ++j)
        {
            PlaceCar(levelwin, &cars[i][j], &player);
        }
    }

    mvprintw(0, 0,"FROG GAME IS WORKING!\nLEVEL %d", choice);
    MainLoop(levelwin, &player, timer, cars, numRoads);
    //getch();
    endwin();
    }
    return 0;
}